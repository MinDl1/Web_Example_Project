# docker-compose.yml

services:
  api:
    container_name: backend_api
    build:
      context: .
      dockerfile: docker/backend/api/Dockerfile
    environment:
      - POSTGRES_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_database:5432/${POSTGRES_DB}
      - MONGO_DATABASE_URL=mongodb://${MONGO_USER}:${MONGO_PASSWD}@mongo_database
      - MONGO_DATABASE_NAME=${MONGO_DATABASE_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
    ports:
      - "8001:8001"
    volumes:
      - backend_api:/api
    networks:
      - api-postgres
      - api-mongo
    depends_on:
      mongo_database:
        condition: service_started
      postgres_database:
        condition: service_started
      test_api:
        condition: service_completed_successfully
  postgres_database:
    container_name: backend_database_postgres
    build:
      context: .
      dockerfile: docker/backend/database/postgres/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TEST_POSTGRES_USER=${TEST_POSTGRES_USER}
      - TEST_POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}
      - TEST_POSTGRES_DB=${TEST_POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - backend_database_postgres:/var/lib/postgresql/data/
    networks:
      - api-postgres
      - test_api-postgres
  mongo_database:
    container_name: backend_database_mongo
    build:
      context: .
      dockerfile: docker/backend/database/mongodb/Dockerfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE_NAME}
      - TEST_MONGO_USER=${TEST_MONGO_USER}
      - TEST_MONGO_PASSWD=${TEST_MONGO_PASSWD}
      - TEST_MONGO_DATABASE_NAME=${TEST_MONGO_DATABASE_NAME}
    ports:
      - "27017:27017"
    volumes:
      - backend_database_mongo_data:/data/db
      - backend_database_mongo_config:/data/configdb
    networks:
      - api-mongo
      - test_api-mongo
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    privileged: true
    restart: unless-stopped
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - "8002:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - prometheus-cadvisor
  nodeexporter:
    container_name: nodeexporter
    image: prom/node-exporter
    restart: unless-stopped
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "8003:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - prometheus-nodeexporter
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.46.0
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - "8004:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - grafana-prometheus
      - prometheus-cadvisor
      - prometheus-nodeexporter
  grafana:
    container_name: grafana
    image: grafana/grafana:8.3.4
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_PROTOCOL=http
    ports:
      - "8005:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - grafana-prometheus

  test_api:
    container_name: test_api
    build:
      context: .
      dockerfile: docker/backend/test/api/Dockerfile
    environment:
      - POSTGRES_DATABASE_URL=postgresql://${TEST_POSTGRES_USER}:${TEST_POSTGRES_PASSWORD}@postgres_database:5432/${TEST_POSTGRES_DB}
      - MONGO_DATABASE_URL=mongodb://${TEST_MONGO_USER}:${TEST_MONGO_PASSWD}@mongo_database
      - MONGO_DATABASE_NAME=${TEST_MONGO_DATABASE_NAME}
      - SECRET_KEY=${TEST_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
      - TEST_USER=${TEST_USER}
      - TEST_PASSWD=${TEST_PASSWD}
    networks:
      - test_api-postgres
      - test_api-mongo
    volumes:
      - test_backend_api:/test
    depends_on:
      mongo_database:
        condition: service_started
      postgres_database:
        condition: service_started

volumes:
  backend_api:
  backend_database_postgres:
  backend_database_mongo_data:
  backend_database_mongo_config:
  prometheus_data: {}
  grafana_data: {}
  test_backend_api:

networks:
  api-postgres:
    driver: bridge
  api-mongo:
    driver: bridge
  grafana-prometheus:
    driver: bridge
  prometheus-cadvisor:
    driver: bridge
  prometheus-nodeexporter:
    driver: bridge
  test_api-postgres:
    driver: bridge
  test_api-mongo:
    driver: bridge
